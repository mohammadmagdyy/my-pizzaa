environment:
  matrix:
    - PYTHON: "C:\\Python27-x64"
      PYTHON_VERSION: "2.7.x" # currently 2.7.13
      PYTHON_ARCH: "64"
      PYTHON_EXE: python
    - PYTHON: "C:\\Python27"
      PYTHON_VERSION: "2.7.x" # currently 2.7.13
      PYTHON_ARCH: "32"
      PYTHON_EXE: python
      GWHEEL_ONLY: true
    # PyPy 7.1 won't actually build the _overlapped extension:
    # overlapped.c(92) : warning C4013: 'PyErr_SetExcFromWindowsErr' undefined; assuming extern returning int
    # overlapped.c(92) : warning C4047: 'return' : 'PyObject *' differs in levels of indirection from 'int'
    # overlapped.c(1166) : warning C4101: 'AddressObj' : unreferenced local variable
    # - PYTHON: "C:\\pypy2.7-v7.1.0-win32"
    #   PYTHON_ID: "pypy"
    #   PYTHON_EXE: pypy
    #   PYTHON_VERSION: "2.7.x"
    #   PYTHON_ARCH: "32"

install:
  # If there is a newer build queued for the same PR, cancel this one.
  # The AppVeyor 'rollout builds' option is supposed to serve the same
  # purpose but it is problematic because it tends to cancel builds pushed
  # directly to master instead of just PR builds (or the converse).
  # credits: JuliaLang developers.
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
          throw "There are newer queued builds for this pull request, failing early." }
  - ECHO "Filesystem root:"
  - ps: "ls \"C:/\""

  - ECHO "Installed SDKs:"
  - ps: "ls \"C:/Program Files/Microsoft SDKs/Windows\""

  # Install Python (from the official .msi of http://python.org) and pip when
  # not already installed.
  # PyPy portion based on https://github.com/wbond/asn1crypto/blob/master/appveyor.yml
  - ps:
      $env:PYTMP = "${env:TMP}\py";
      if (!(Test-Path "$env:PYTMP")) {
        New-Item -ItemType directory -Path "$env:PYTMP" | Out-Null;
      }
      if ("${env:PYTHON_ID}" -eq "pypy") {
        if (!(Test-Path "${env:PYTMP}\pypy2-v7.1.0-win32.zip")) {
          (New-Object Net.WebClient).DownloadFile('https://bitbucket.org/pypy/pypy/downloads/pypy2.7-v7.1.0-win32.zip', "${env:PYTMP}\pypy2-v7.1.0-win32.zip");
        }
        7z x -y "${env:PYTMP}\pypy2-v7.1.0-win32.zip" -oC:\ | Out-Null;
        & "${env:PYTHON}\pypy.exe" "-mensurepip";

      }
      elseif (-not(Test-Path($env:PYTHON))) {
        & appveyor\install.ps1;
      }

  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PYTHON%\\bin;%PATH%"
  - "SET PYEXE=%PYTHON%\\%PYTHON_EXE%.exe"

  # Check that we have the expected version and architecture for Python
  - "%PYEXE% --version"

  - "%PYEXE% -m pip install --disable-pip-version-check -U pip"
  - "%PYEXE% -m pip install -U setuptools wheel"

build_script:
  - "%PYEXE% setup.py bdist_wheel"

# Theer's nothing to actually test anymore; the aiotest dependency is gone.
test_script:
  - "%PYEXE% --version"

artifacts:
  - path: dist/*.whl

cache:
  - "%TMP%\\py\\"
  - '%LOCALAPPDATA%\pip\Cache'
